var documenterSearchIndex = {"docs":
[{"location":"installation.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation.html#Minecraft:-Pi","page":"Installation","title":"Minecraft: Pi","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Minecraft: Pi is free and comes pre-installed on all Rasbian since September 2014. Launch it by navigating to Menu > Games or typing minecraft-pi in the terminal. However, if you are running an older version of Raspbian get the game here. Refer to the same link if you are unable to launch it.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Note that Minecraft: Pi is limited compared to the Java version. If you have a powerful computer and access to a Minecraft: Java license then you should consider using that platform for a better experience.","category":"page"},{"location":"installation.html#Minecraft:-Java","page":"Installation","title":"Minecraft: Java","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Minecraft: Java can be purchased and downloaded here. Follow the installation instructions provided there. The Java edition works on Windows, Linux and MacOS. However, we will need either RaspberryJamMod or RaspberryJuice to run PiCraft.","category":"page"},{"location":"installation.html#RaspberryJamMod","page":"Installation","title":"RaspberryJamMod","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"This is a forge mod. The package is hosted here. The last version of  RaspberryJamMod is for forge 1.12 so we will need that first. Download link.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"(Image: forge_download)","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Download the installer. The installer requires Java so incase your computer does not recognise it download the latest version of Java here. On windows you  can directly run the installer, on linux/mac if you can't ","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"On linux/macOS the installer will be named something like forge-1.12.2-14.23.4.2749-installer.jar","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"To run the installer open the Terminal from Applications and head over to the directory where the installer is present. Then run it by doing the follows:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"cd Downloads\njava -jar forge-1.12.2-14.23.4.2854-installer.jar","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"(Image: installer)","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Click Install client then click OK. Upon completion Forge should be installed.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Now we need to install the mod. For this download the mods.zip file from the RaspberryJamMod github page. The mods.zip folder consists of many folders, open the folder 1.12.2 and it should contain a single file named RaspberryJamMod.jar.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"To install the mod we need to extract it to the mods folder in the minecraft directory. The location for the the .minecraft directory for each OS is given below.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"OS Location\nWindows %APPDATA%.minecraft\nmacOS ~/Library/Application Support/minecraft\nLinux ~/.minecraft","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Now head over to this location and create a folder named mods if it does not exist.  Copy the extracted folder 1.12.2. The mod is now installed.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Next time you launch Minecraft select forge 1.12.2 when starting. This can be done by going to the installations tab and selecting Forge 1.12.2.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"(Image: minecraft_load_mod)","category":"page"},{"location":"installation.html#RaspberryJuice","page":"Installation","title":"RaspberryJuice","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"This is a Bukkit plugin. If you wish to operate a server with many clients then this is probably the best way to go. You will need to first setup CraftBukkit and then install the plugin. Refer to the Bukkit Forums and Docs for instructions and help.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"There is also an easy option and that is to grab the Adventures in Minecraft starter kit for your OS and then run it. Grab the Kit here. Adventures in Minecraft is a book aimed at kids to teach them programming(python) using the Minecraft: Pi API. This starter pack is provided by them and is an extremely easy way to setup the environment we need.","category":"page"},{"location":"installation.html#Install-Julia","page":"Installation","title":"Install Julia","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Get the latest stable release of Julia here.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"For the Raspberry Pi download the Generic Linux Binaries for ARM. We need to extract the tar.gz file then create a symbolic link to julia.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"cd ~/Downloads\ntar -xvf julia-1.0.0-linux-armv7l.tzr.gz\nsudo ln -s ~/julia-1.0.0/bin/julia /usr/bin/julia\njulia","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"This should launch julia. Whenever you need to open julia open the terminal and enter julia.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"This should install a REPL shell. REPL stands for Read-Eval-Print-Loop. This is an interactive shell in which you can run your code(Like Python's IDLE). While, it is possible to do everything in this shell there are other options to choose from as an IDE(Integrated Development Environment).","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Most popular options are Jupyter Notebooks and Juno.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Juno is built on Atom and adds Julia-specific enhancements, such as syntax highlighting, a plot pane, integration with Julia's debugger (Gallium) , a console for running code, and much more. You can read more about it and get appropriate installation instructions here.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Juno(and Atom) is a bit resource hungry compared to other editors hence is not recommended for systems with low specs like the Raspberry Pi. It is recommended that you use the REPL shell or Jupyter notebook for slower machines.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Jupyter notebook is a web application in which you can run julia code. You need the IJulia package to run Julia from this notebook. Get IJulia here. One benefit of using a Jupyter notebook is that you can run Minecraft in full screen on one computer and use another computer/tablet's browser to write and execute code for convenience.","category":"page"},{"location":"eventsEntitiesCamera.html#Events,-Entities-and-Camera","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"","category":"section"},{"location":"eventsEntitiesCamera.html#Event","page":"Events, Entities and Camera","title":"Event","text":"","category":"section"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"There are two types of events: Hit events and Chat events","category":"page"},{"location":"eventsEntitiesCamera.html#Hit-Event","page":"Events, Entities and Camera","title":"Hit Event","text":"","category":"section"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"If you equip your player with a sword and right click to hit a block then that hit will be recorded and is effectively a 'HitEvent'. Use the pollBlockHits() function to get an array of all of these events. Each event is described by a tuple ((x, y, z), face, entityId). x, y and z are the coordinates of the block. face is the block's face number which was hit and entityId identifies the player who hit the block using a sword.","category":"page"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"Check out the turntogold example to find out how it can be used.","category":"page"},{"location":"eventsEntitiesCamera.html#Chat-Event","page":"Events, Entities and Camera","title":"Chat Event","text":"","category":"section"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"We can find out all the chat messages posted in the session using the getChatEvents() function.","category":"page"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"julia> getChatEvents()\n2-element Array{Tuple{Int64,String},1}:\n (152, \"Hello!\")               \n (152, \"Is anyone listening ?\")","category":"page"},{"location":"eventsEntitiesCamera.html#Entity","page":"Events, Entities and Camera","title":"Entity","text":"","category":"section"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"Each player is uniquely identified by an id called 'EntityId'. Execute getPlayerIds() to get an array of all Entities connected to this session.","category":"page"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"julia> getPlayerIds()\n1-element Array{Int64,1}:\n 152","category":"page"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"You can also manipulate the position of any entity using the commands:","category":"page"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"getPos(entityId::Int)\nsetPos(pos::Tuple{Real, Real, Real})\ngetTile(entityId::Int)\nsetTile(entityId::Int, pos::Tuple{Real, Real, Real})","category":"page"},{"location":"eventsEntitiesCamera.html#Camera","page":"Events, Entities and Camera","title":"Camera","text":"","category":"section"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"Camera commands are only available on the Pi. Here are all the available camera commands.","category":"page"},{"location":"eventsEntitiesCamera.html","page":"Events, Entities and Camera","title":"Events, Entities and Camera","text":"setNormal(entityId::Int)\nsetFixed()\nsetFollow(entityId::Int)\nsetPos(pos::Tuple{Real, Real, Real})","category":"page"},{"location":"example/safeFeet.html#Safe-Feet","page":"Safe Feet","title":"Safe Feet","text":"","category":"section"},{"location":"example/safeFeet.html","page":"Safe Feet","title":"Safe Feet","text":"Walk over water and air by replacing it with Dimaond Blocks Usage:","category":"page"},{"location":"example/safeFeet.html","page":"Safe Feet","title":"Safe Feet","text":"using PiCraft\n\nfunction safeFeet()\n   b = getTile() .+ (0, -1, 0)    #Get the Block coordinates on which the player is standing\n   if getBlock(b) ∈  [PiCraft.AIR, PiCraft.WATER_STATIONARY, PiCraft.WATER_FLOWING, PiCraft.LAVA, PiCraft.LAVA_STATIONARY] #Check if the block is\n       setBlock(b, PiCraft.DIAMOND_BLOCK)\n   end\n   sleep(0.05) #Pause as to not spam the API, results in a smoother experience\nend","category":"page"},{"location":"example/safeFeet.html","page":"Safe Feet","title":"Safe Feet","text":"Run this function in a loop, and press Ctrl-C to stop","category":"page"},{"location":"example/safeFeet.html","page":"Safe Feet","title":"Safe Feet","text":"   t = now()\n   while (now() - t).value/1000 < time_period\n      safeFeet()\n   end","category":"page"},{"location":"example/safeFeet.html#Challenge:","page":"Safe Feet","title":"Challenge:","text":"","category":"section"},{"location":"example/safeFeet.html","page":"Safe Feet","title":"Safe Feet","text":"Use a queue to remove blocks such that the maximum bridge length is 10.\nYour script should automatically remove blocks which had too far behind.\nEnter \"\\py bridge\" for a demonstration","category":"page"},{"location":"example/safeFeet.html","page":"Safe Feet","title":"Safe Feet","text":"","category":"page"},{"location":"example/safeFeet.html","page":"Safe Feet","title":"Safe Feet","text":"This page was generated using Literate.jl.","category":"page"},{"location":"blocks.html#Block-Reference","page":"Block Reference","title":"Block Reference","text":"","category":"section"},{"location":"blocks.html","page":"Block Reference","title":"Block Reference","text":"Id Name Subtype Image Data\n0 Air   0\n1 Stone  (Image: mc-block) 0\n2 Grass  (Image: mc-block) 0\n3 Dirt  (Image: mc-block) 0\n4 Cobblestone  (Image: mc-block) 0\n5 Wood Plank Oak (Image: mc-block) 1\n  Spruce (Image: mc-block) 2\n  Birch (Image: mc-block) 3\n  Jungle (Image: mc-block) 4\n6 Sapling Oak (Image: mc-block) 0\n Sapling Spruce (Image: mc-block) 1\n Sapling Birch (Image: mc-block) 2\n Sapling Jungle (Image: mc-block) 3\n7 Bedrock  (Image: mc-block) 0\n8 Water(Flowing)   0\n9 Water(Stationary) High (Image: mc-block) 0\n Water(Stationary) Low  7\n10 Lava(Flowing)   0\n11 Lava(Stationary) High (Image: mc-block) 0\n11 Lava(Stationary) Low  7\n12 Sand  (Image: mc-block) 0\n13 Gravel  (Image: mc-block) 0\n14 Gold Ore  (Image: mc-block) 0\n15 Iron Ore  (Image: mc-block) 0\n16 Coal Ore  (Image: mc-block) 0\n17 Wood Oak(up/down) (Image: mc-block) 0\n  Spruce(up/down) (Image: mc-block) 1\n  Birch(up/down) (Image: mc-block) 2\n  Jungle(up/down) (Image: mc-block) 3\n  Oak(east/west)  4\n  Spruce(east/west)  5\n  Birch(east/west)  6\n  Jungle(east/west)  7\n  Oak(north/south)  8\n  Spruce(north/south)  9\n  Birch(north/south)  10\n  Jungle(north/south)  11\n  Oak(only bark) (Image: mc-block) 12\n  Spruce(only bark) (Image: mc-block) 13\n  Birch(only bark) (Image: mc-block) 14\n  Jungle(only bark) (Image: mc-block) 15\n18 Leaves Oak (Image: mc-block) 1\n  Spruce (Image: mc-block) 2\n  Birch (Image: mc-block) 3\n19 Glass  (Image: mc-block) 0\n21 Lapis Lazuli Ore  (Image: mc-block) 0\n22 Lapis Lazuli Block  (Image: mc-block) 0\n24 Sandstone Ordinary (Image: mc-block) 0\n  Chiselled (Image: mc-block) 1\n  Smooth (Image: mc-block) 2\n26 Bed  (Image: mc-block) 0\n30 Cobweb  (Image: mc-block) 0\n31 Grass(tall) Shrub (Image: mc-block) 0\n  Grass (Image: mc-block) 1\n  Fern (Image: mc-block) 2\n  Grass(color by biome)  3\n35 Wool White (Image: mc-block) 0\n  Orange (Image: mc-block) 1\n  Magenta (Image: mc-block) 2\n  Light Blue (Image: mc-block) 3\n  Yellow (Image: mc-block) 4\n  Lime (Image: mc-block) 5\n  Pink (Image: mc-block) 6\n  Grey (Image: mc-block) 7\n  Light Grey (Image: mc-block) 8\n  Cyan (Image: mc-block) 9\n  Purple (Image: mc-block) 10\n  Blue (Image: mc-block) 11\n  Brown (Image: mc-block) 12\n  Green (Image: mc-block) 13\n  Red (Image: mc-block) 14\n  Black (Image: mc-block) 15\n37 Yellow Flower(dandelion)  (Image: mc-block) 0\n38 Cyan Flower  (Image: mc-block) 0\n39 Brown Mushroom  (Image: mc-block) 0\n40 Red Mushroom  (Image: mc-block) 0\n41 Gold Block  (Image: mc-block) 0\n42 Iron Block  (Image: mc-block) 0\n43 Double Slab Stone (Image: mc-block) 0\n  Sandstone (Image: mc-block) 1\n  Wooden (Image: mc-block) 2\n  Cobblestone (Image: mc-block) 3\n  Brick (Image: mc-block) 4\n  Stone Brick (Image: mc-block) 5\n  Nether Brick (Image: mc-block) 6\n  Quartz (Image: mc-block) 7\n44 Single Slab Stone (Image: mc-block) 0\n  Sandstone (Image: mc-block) 1\n  Wooden (Image: mc-block) 2\n  Cobblestone (Image: mc-block) 3\n  Brick (Image: mc-block) 4\n  Stone Brick (Image: mc-block) 5\n  Nether Brick (Image: mc-block) 6\n  Quartz (Image: mc-block) 7\n45 Brick Block  (Image: mc-block) 0\n46 TNT Inactive (Image: mc-block) 0\n  Ready to explode (Image: mc-block) 1\n47 Bookshelf  (Image: mc-block) 0\n48 Moss Stone  (Image: mc-block) 0\n49 Obsidian  (Image: mc-block) 0\n50 Torch On floor (Image: mc-block) 0\n  Pointing East  1\n  Pointing West  2\n  Pointing South  3\n  Pointing North  4\n51 Fire  (Image: mc-block) 0\n53 Stair Wood Ascending east (Image: mc-block) 0\n  Ascending west  1\n  Ascending south  2\n  Ascending north  3\n  Ascending east(upside down) (Image: mc-block) 4\n  Ascending west(upside down)  5\n  Ascending south(upside down)  6\n  Ascending north(upside down)  7\n54 Chest Facing north (Image: mc-block) 2\n  Facing south  3\n  Facing west  4\n  Facing east  5\n56 Diamond Ore  (Image: mc-block) 0\n57 Diamond Block  (Image: mc-block) 0\n58 Crafting Table  (Image: mc-block) 0\n60 Farmland  (Image: mc-block) 0\n61 Furnace(Inactive) Facing north (Image: mc-block) 2\n  Facing south  3\n  Facing west  4\n  Facing east  5\n62 Furnace(Active) Facing north (Image: mc-block) 2\n  Facing south  3\n  Facing west  4\n  Facing east  5\n64 Wooden Door  (Image: mc-block) 0\n65 Ladder Facing north (Image: mc-block) 2\n  Facing south  3\n  Facing west  4\n  Facing east  5\n67 Cobblestone Stairs Ascending east (Image: mc-block) 0\n  Ascending west  1\n  Ascending south  2\n  Ascending north  3\n  Ascending east(upside down) (Image: mc-block) 4\n  Ascending west(upside down)  5\n  Ascending south(upside down)  6\n  Ascending north(upside down)  7\n71 Iron Door  (Image: mc-block) 0\n73 Redstone Ore  (Image: mc-block) 0\n78 Snow Lowest <img src=\"./assets/BlockImages/Snow.png\" width=\"150\" height=\"78\" /> 0\n  Highest  7\n79 Ice  (Image: mc-block) 0\n80 Snow Block  (Image: mc-block) 0\n81 Cactus  (Image: mc-block) 0\n82 Clay  (Image: mc-block) 0\n83 Sugarcane  (Image: mc-block) 0\n85 Fence  (Image: mc-block) 0\n89 Glowstone  (Image: mc-block) 0\n95 Bedrock(invisible)   0\n98 Stone Brick Normal (Image: mc-block) 0\n  Mossy (Image: mc-block) 1\n  Cracked (Image: mc-block) 2\n  Chiseled (Image: mc-block) 3\n102 Glass Pane  (Image: mc-block) 0\n103 Melon  (Image: mc-block) 0\n107 Fence Gate  (Image: mc-block) 0\n246 Glowing Obsidian  (Image: mc-block) 0\n247 Nether Reactor Unused (Image: mc-block) 0\n  Active (Image: mc-block) 1\n  Stopped/used up (Image: mc-block) 2","category":"page"},{"location":"api.html","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api.html","page":"API Reference","title":"API Reference","text":"Modules = [PiCraft]\nOrder   = [:type, :function]","category":"page"},{"location":"api.html#PiCraft.Block","page":"API Reference","title":"PiCraft.Block","text":"`Block`\n\nA minecraft block consisting of an id and data. id is the main identifier and data defines an additional attribute like color or sub-type. Both fields are  stored as Int.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PiCraft.turtle","page":"API Reference","title":"PiCraft.turtle","text":"turtle\n\nA graphics turtle meant to move in all 3-Dimensions. It contains the following fields:\n\npos : The coordinates of the turtle.\ndirection : The Roll Axis - direction in which the turtle is facing.\nnormal : The Yaw axis - direction normal to the turtle's body.\npenBlock : The block which will be used to draw.\nstepSize : The size of a turtle's step.\npenDown : Activation state of penBlock.\n\nThe default constructor initializes the turtle at the player's position,roll axis is the positive x-direction, with the yaw axis pointing downwards. penBlock is gold by default and is activated with the stepSize = 0.5\n\n\n\n\n\n","category":"type"},{"location":"api.html#PiCraft.buildModel-Tuple{Array{Block,3},Tuple{Real,Real,Real}}","page":"API Reference","title":"PiCraft.buildModel","text":"buildModel(m::Array{Block, 3}, pos::Tuple{Real, Real, Real})\n\nBuild a model from a 3-D block array at pos.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.clearEvents-Tuple{}","page":"API Reference","title":"PiCraft.clearEvents","text":"Clear all events in the buffer\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.connectToWorld","page":"API Reference","title":"PiCraft.connectToWorld","text":"connectToWorld(address = \"localhost\", port = 4711)\n\nConnect to the Minecraft API. Connects using TCPSocket.\n\n\n\n\n\n","category":"function"},{"location":"api.html#PiCraft.copyModel-Tuple{Tuple{Real,Real,Real},Tuple{Real,Real,Real}}","page":"API Reference","title":"PiCraft.copyModel","text":"copyModel(p1::Tuple{Real, Real, Real}, p2::Tuple{Real, Real, Real})\n\nCopy the Blocks between the diagonally opposite blocks and store in a 3-D Block Array.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.cutModel","page":"API Reference","title":"PiCraft.cutModel","text":"cutModel(p1::Tuple{Real, Real, Real}, p2::Tuple{Real, Real, Real}, block::Block)\n\nCopy blocks between diagonally opposite blocks and fill the space with block.\n\n\n\n\n\n","category":"function"},{"location":"api.html#PiCraft.drawLine","page":"API Reference","title":"PiCraft.drawLine","text":"drawLine(p1::Tuple{Real,Real,Real}, p2::Tuple{Real,Real,Real}, block::PiCraft.Block = PiCraft.GOLD_BLOCK, width::Real = 1)\n\nDraw a line from point p1 to point p2 using block. block is gold block by default.\n\n\n\n\n\n","category":"function"},{"location":"api.html#PiCraft.flip-Tuple{Array{Block,3},Symbol}","page":"API Reference","title":"PiCraft.flip","text":"flip(A::Array{Block, 3}, dim::Symbol)\n\nFlip a 3-D Block Array in a particular dimension. Dimensions are x, y and z\n\nExample\n\njulia> A = reshape(Block.(collect(1:8)), (2,2,2))\n2×2×2 Array{PiCraft.Block,3}:\n[:, :, 1] =\n PiCraft.Block(1, 0)  PiCraft.Block(3, 0)\n PiCraft.Block(2, 0)  PiCraft.Block(4, 0)\n\n[:, :, 2] =\n PiCraft.Block(5, 0)  PiCraft.Block(7, 0)\n PiCraft.Block(6, 0)  PiCraft.Block(8, 0)\n\njulia> flip(A, :z)\n2×2×2 Array{PiCraft.Block,3}:\n[:, :, 1] =\n PiCraft.Block(5, 0)  PiCraft.Block(7, 0)\n PiCraft.Block(6, 0)  PiCraft.Block(8, 0)\n\n[:, :, 2] =\n PiCraft.Block(1, 0)  PiCraft.Block(3, 0)\n PiCraft.Block(2, 0)  PiCraft.Block(4, 0)\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.getBlock-Tuple{Tuple{Real,Real,Real}}","page":"API Reference","title":"PiCraft.getBlock","text":"getBlock(pos::Tuple{Real, Real, Real})\n\nGet the Block information from the specified coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.getHeight-Tuple{Int64,Int64}","page":"API Reference","title":"PiCraft.getHeight","text":"getHeight(x::Int, z::Int)\n\nGet the height of the world at the specified x and z coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.getPlayerIds-Tuple{}","page":"API Reference","title":"PiCraft.getPlayerIds","text":"getPlayerIds()\n\nReturn an array of all Player Id's connected to the server.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.getPos-Tuple{Int64}","page":"API Reference","title":"PiCraft.getPos","text":"getPos(entityId::Int)\n\nGet the position of the specified entity.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.getPos-Tuple{}","page":"API Reference","title":"PiCraft.getPos","text":"getPos()\n\nReturn the player's coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.getTile-Tuple{Int64}","page":"API Reference","title":"PiCraft.getTile","text":"getTile(entityId::Int)\n\nGet the tile on which the specified entity is.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.getTile-Tuple{}","page":"API Reference","title":"PiCraft.getTile","text":"getTile()\n\nReturn the tile's coordinates on which the player is standing.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.importSchematic-Tuple{AbstractString}","page":"API Reference","title":"PiCraft.importSchematic","text":"importSchematic(filename::AbstractString)\n\nReads a .schematic file and return a 3 - D matrix of type Array{Block, 3}(model) which represents the schematic.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.mc_send","page":"API Reference","title":"PiCraft.mc_send","text":"mc_send(cmd::String, output=true)\n\nCommunicate with the Minecraft API. cmd is the command which will be sent to  the world with the associated TCPSocket and output indicates whether a response  is expected. If true then the respose is returned.\n\n\n\n\n\n","category":"function"},{"location":"api.html#PiCraft.move-Tuple{turtle,Real}","page":"API Reference","title":"PiCraft.move","text":"move(t::turtle, s::Int)\n\nMove the turtle t forward s units.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.parseNBT","page":"API Reference","title":"PiCraft.parseNBT","text":"parseNBT(filename::AbstractString, ostream::IO = stdout)\n\nParse a Named Binary tag file.\n\n\n\n\n\n","category":"function"},{"location":"api.html#PiCraft.pitch-Tuple{turtle,Real}","page":"API Reference","title":"PiCraft.pitch","text":"pitch(t::turtle, θ::Real)\n\nPitch the turtle t by θ degrees.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.pollBlockHits-Tuple{}","page":"API Reference","title":"PiCraft.pollBlockHits","text":"pollBlockHits()\n\nReturns an array of all the events which have occurred since the last time the  function was called.Each event is described with a tuple ((x, y, z), face,  entityId). x, y and z are the coordinates of the block.face is the block's face number which was hit and entityId identifies the player who hit the block  using a sword. Polling hit events removes them from the buffer.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.post-Tuple","page":"API Reference","title":"PiCraft.post","text":"post(m...)\n\nPost a message to chat\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.readTAG","page":"API Reference","title":"PiCraft.readTAG","text":"readTag(stream::IO, tagId = -1)\n\nRead a single Binary Tag from stream. tagId is the type of nameless Tag tagId is -1 for Named Binary Tag.\n\n\n\n\n\n","category":"function"},{"location":"api.html#PiCraft.restoreWorld-Tuple{}","page":"API Reference","title":"PiCraft.restoreWorld","text":"Restore the world to the previous savepoint.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.roll-Tuple{turtle,Real}","page":"API Reference","title":"PiCraft.roll","text":"roll(t::turtle, θ::Real)\n\nRoll the turtle t by θ degrees.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.rotate-Tuple{Array{Block,3},Symbol,Symbol}","page":"API Reference","title":"PiCraft.rotate","text":"rotate(A::Array{Block, 3}; dir::Symbol = :l, dim::Symbol = :x)\n\nRotate a 3-D Block Array 90 degrees in a dimension and direction. Dimensions are x, y and z. Directions are l & r.\n\nExample\n\njulia> A = reshape(Block.(collect(1:8)), (2,2,2))\n2×2×2 Array{PiCraft.Block,3}:\n[:, :, 1] =\n PiCraft.Block(1, 0)  PiCraft.Block(3, 0)\n PiCraft.Block(2, 0)  PiCraft.Block(4, 0)\n\n[:, :, 2] =\n PiCraft.Block(5, 0)  PiCraft.Block(7, 0)\n PiCraft.Block(6, 0)  PiCraft.Block(8, 0)\n\njulia> rotate(A, dir = :r, dim = :y)\n 2×2×2 Array{PiCraft.Block,3}:\n [:, :, 1] =\n  PiCraft.Block(3, 0)  PiCraft.Block(7, 0)\n  PiCraft.Block(4, 0)  PiCraft.Block(8, 0)\n\n [:, :, 2] =\n  PiCraft.Block(1, 0)  PiCraft.Block(5, 0)\n  PiCraft.Block(2, 0)  PiCraft.Block(6, 0)\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.saveWorld-Tuple{}","page":"API Reference","title":"PiCraft.saveWorld","text":"Save the World's progress\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.setBlock-Tuple{Tuple{Real,Real,Real},Block}","page":"API Reference","title":"PiCraft.setBlock","text":"setBlock(pos::Tuple{Real, Real, Real}, block::Block)\n\nPlace the specified Block at the given coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.setBlocks-Tuple{Tuple{Real,Real,Real},Tuple{Real,Real,Real},Block}","page":"API Reference","title":"PiCraft.setBlocks","text":"setBlocks(p1::Tuple{Real, Real, Real}, p2::Tuple{Real, Real, Real}, block::Block)\n\nSet an entire region to the specified block type defined by the corners p1 and p2.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.setPos-Tuple{Int64,Tuple{Real,Real,Real}}","page":"API Reference","title":"PiCraft.setPos","text":"setPos(entityId::Int, pos::Tuple{Real, Real, Real})\n\nSet the position of the specified entity.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.setPos-Tuple{Tuple{Real,Real,Real}}","page":"API Reference","title":"PiCraft.setPos","text":"setPos(pos::Tuple{Real, Real, Real})\n\nTeleport the player to the specified coordinates\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.setTile-Tuple{Int64,Tuple{Real,Real,Real}}","page":"API Reference","title":"PiCraft.setTile","text":"setTile(entityId::Int)\n\nTeleport the entity on the specified tile.\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.setTile-Tuple{Tuple{Real,Real,Real}}","page":"API Reference","title":"PiCraft.setTile","text":"setTile(pos::Tuple{Real, Real, Real})\n\nTeleport the player on top of the specified tile\n\n\n\n\n\n","category":"method"},{"location":"api.html#PiCraft.yaw-Tuple{turtle,Real}","page":"API Reference","title":"PiCraft.yaw","text":"yaw(t::turtle, θ::Real)\n\nYaw the turtle t by θ degrees.\n\n\n\n\n\n","category":"method"},{"location":"example/skyscraperBasic.html#Construct-a-skyscraper","page":"Sky Scraper","title":"Construct a skyscraper","text":"","category":"section"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"using PiCraft","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"With the help of programming we can build entire cities with ease. Writing a program to build structures is a great way to minimize repetitive work while experimenting with different parameters. If you are making a small house odds are that writing a program is inefficient and manually building it will get the job done much faster. However, if you are trying to build a skyscraper which spawns 20 stories high then manually it could take several hours depending on your speed but it will definitely be very boring. Writing code to do the same will take a dozen minutes with the added advantage that making changes will be extremely easy.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"To get there first we will start small. In this tutorial we will learn how to build a simple skyscraper.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Our first task is to decide the dimensions and the parameters. Then think of a strategy/algorithm which will do the construction.","category":"page"},{"location":"example/skyscraperBasic.html#makeSkyscraper()","page":"Sky Scraper","title":"makeSkyscraper()","text":"","category":"section"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Decide the location for the building   p = getTile()\nDecide the dimensions and parameters for the building\nfloors = 5\nlength = 10\nwidth = 15\nheight = 6\nWrite the pseudo-code/algorithm   Pseudo-code means to write informal code rather than actual code which a human can understand. It can be helpful in designing algorithms this way.\n  x = start_position\n  for i in 1:floors\n      buildFloor(x)\n      increment x's height by floor's height\n  end\n  Build a ceiling for the top floor\n\n  Now to build a floor\n     1) Make all the walls out of glass panes\n     2) Set the bottom level as the flooring block. (Cobblestone for instance)\n     3) Add pillars to the corners","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Let's first define a few basic parameters for our building","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"p = getTile()\nfloors = 5","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"length will be in the +ve x direction and width in the +ve z direction","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"len = 10\nwidth = 15\nheight = 6","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"We're first going to write code to construct a single floor relative to a point Then we will use a loop to create a skyscraper pseudocode:    x = start_position    for i in 1:floors        buildFloor(x)        increase x's height by floor's height    end    Build a ceiling for the top floor","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Now to build a floor","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Make all the walls out of glass panes\nSet the bottom level as floor\nGet Pillars on the corners","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"function buildFloor(p)\n    #Set all walls to glass panes\n    setBlocks(p .+ (1, 0, 1), p .+ (1, height, width), PiCraft.GLASS_PANE)\n    setBlocks(p .+ (1, 0, 1), p .+ (len, height, 1), PiCraft.GLASS_PANE)\n    setBlocks(p .+ (1, height, width), p .+(len, 0, width), PiCraft.GLASS_PANE)\n    setBlocks(p .+ (len, height, width), p .+ (len, 0, 1), PiCraft.GLASS_PANE)\n\n    #Set entire floor to Stone Brick\n    setBlocks(p .+ (1, 0, 1), p .+ (len, 0, width), PiCraft.STONE_BRICK)\n\n    #Set 4 Pillars to the corners\n    setBlocks(p .+ (1, 0, 1), p .+ (1, height, 1), PiCraft.STONE_BRICK)\n    setBlocks(p .+ (1, 0, width), p .+ (1, height, width), PiCraft.STONE_BRICK)\n    setBlocks(p .+ (len, 0, 1), p .+ (len, height, 1), PiCraft.STONE_BRICK)\n    setBlocks(p .+ (len, 0 , width), p .+ (len, height, width), PiCraft.STONE_BRICK)\nend\n\nfunction makeSkyscraper()\n    for i in 1:floors\n        buildFloor(p .+ (0, height*i - height, 0))\n    end\n    setBlocks(p .+ (1, height*floors, 1), p .+ (len, height*floors, width), PiCraft.IRON_BLOCK) # Set Roof to Iron Block\nend","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Executing makeSkyscraper() once will construct a building in front of you. Try experimenting around with different dimensions.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"(Image: makeSkyscraper.gif)","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"(Image: makeSkyscraper.png)","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"","category":"page"},{"location":"example/skyscraperBasic.html#makeSkyscraper2()","page":"Sky Scraper","title":"makeSkyscraper2()","text":"","category":"section"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"This building serves as a demonstration of how we can break down a construction task. When programming we will generally have a choice of algorithms/strategies to choose among. In our next example we will choose a different algorithm.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Decide the location, parameters and dimensions like last time.\np = getTile()\nfloors = 5\nlength = 10\nwidth = 15\nheight = 6\nPseudocode\nPlace a cuboid of blocks on the building space\nHollow out the inside\nFor each floor\nAdd flooring\nAdd windows","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"This building isn't particularly nice and has too much glass. Let's have another go. When we use programming to solve a problem there can be multiple solutions to the same problem.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"This time let's make the building first and then add windows later","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"function makeSkyscraper2()","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Make a filled cuboid of Blocks filling the entire building space","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"    setBlocks(p .+ (1, 0, 1), p .+ (len, height*floors + 1, width),Block(251, 0))","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Hollow out the inside of the building","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"    setBlocks(p .+ (2, 1, 2), p .+ (len - 1, height*floors, width - 1), PiCraft.AIR)","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Add wooden flooring","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"    for i in 0:floors\n        setBlocks(p .+ (2, height*i, 2), p .+ (len - 1, height*i, width - 1), PiCraft.WOOD_PLANKS)\n    end","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Add window Panes, careful if you change the given building dimensions, the change in coordinates may result in unintended consequences.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"    for i in 0:(floors - 1)\n        setBlocks(p .+ (1, height*i + 2, floor.((width + 1)/2 - 2)),\n        p .+ (1, height*i + 4, floor.((width + 1)/2 + 2)), PiCraft.GLASS_PANE)\n        setBlocks(p .+ (1, height*i + 2, floor.((width + 1)/2 - 2)),\n        p .+ (1, height*i + 4, floor.((width + 1)/2 + 2)), PiCraft.GLASS_PANE)\n    end\nend","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"(Image: makeSkyscraper2.png)","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"To get better at building you should practice and try new structures and dimensions. Make your building beautiful by experimenting with a variety of different colored blocks and parameters. You can find a list of challenges below.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"In our second iteration we made the building better, the code is easier to follow through and is less in comparison. Now, experiment with writing your own code architecturing your own designs. Check out the challenges listed below Challenges :","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"Make the building well lit with torches\nAdd a balcony to each floor.\nA common ladder access for all floors.\nAdd randomness to your design Hint: for all blocks in building if block is cobblestone and rand() < 0.1 set block to Mossy Cobblestone\nTry constructing a building with the \"setback\" design in mind. Given below is a documentary on how the setback principle came about.","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"(Image: How New York got its Skyline)","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"","category":"page"},{"location":"example/skyscraperBasic.html","page":"Sky Scraper","title":"Sky Scraper","text":"This page was generated using Literate.jl.","category":"page"},{"location":"example/platform9_75.html#Platform-9","page":"Platform 9¾","title":"Platform 9¾","text":"","category":"section"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"In this example we will explore Platform 9 and three quarters of King's cross station, London","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"At the beginning of an academic year of Hogwarts School of Witchcraft and Wizardry a large number of students choose to travel using the Hogwards Express. The train departs from platform 9 and three quarters, King's Cross Station, London. To reach this platform wizards and witches must run into an arch between the platforms 9 and 10 to be teleported the 9¾ platform. However due a certain number of mishaps/accidents over the years the Ministry of Magic has made new rules.","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"Only those heading into the wall at a predetermined speed of 4.3 m/s may be teleported. Too slow and the wizrd might be folling around and too fast might result in a minor injury or worse... Being spotted by a muggle which the ministry will then have obliviate. PS : The ministry has now enforced the metric system for all official work. Hence the speed is mentioned in meters per second.","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"using PiCraft","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"First let us make the platforms (Muggle and Wizard world) Let's first make the muggle platform (9 & 10) and then place a platform perpendicular to that beneath","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"p = getTile()\nsetBlocks(p .+ (1, 0, 1), p .+ (12, 1, 40), Block(43, 5)) # Make a cobblestone platform\nsetBlocks(p .+ (5, 2, 1), p .+ (8, 12, 40), Block(45))    # For Brick arches","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"Now we want to make arches in the brick column. For now semi-circular arches will do The equation for a general circle is x^2 + y^2 = r^2 where r is the radius So in general if we have a point: (a, b, c) and we wish to make a circle around it we might do something like this:- (Say in the x-y plane)","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"for x = -r:sign(r):r, y = -r:sign(r):r\n    if x^2 + y^2 <= r^2\n        setBlock(p .+ (x, y, 0), Block(1,0))\n    end\nend","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"However, since we have to make a semicircle we should only iterate y from 0 to r","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"r = 9\nc1 = p .+ (5, 2, 11) # Center for 1st arch\nfor y = 0:r, z = -r:r\n    if y^2 + z^2 < r^2\n        setBlocks(c1 .+ (0, y, z), c1 .+ (3, y, z), Block(0))\n    end\nend\n\nc2 = p .+ (5, 2, 40 - 10)\nfor y = 0:r, z = -r:r\n    if y^2 + z^2 < r^2\n        setBlocks(c2 .+ (0, y, z), c2 .+ (3, y, z), Block(0))\n    end\nend","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"(Image: Platform.gif)","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"Now we must now choose a reasonable condition to teleport One way can be: If player velocity in z direction and position is encosed within x: p[1] + 5:8 , y: p[2] + 2, z: 20.3 then teleport to desired location.","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"Now how do we calculate velocity ? Velocity is the rate at which an object's position changes w.r.t time. We can compute velocity as follows:","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"p1 = getPos()\nsleep(0.05)\np2 = getPos()\nvel = (p2 - p1)./0.05 # velocity = distance/time","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"This gives us the velocity component of each direction. To get the true instantaneous velocity we have to take the norm of this. v = norm([velocity...]) # We effectively does v = sqrt(vel_x^2 + vel_y^2 + vel_z^2) However we only care about a wizard's z-component of velocity which will be vel[3]","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"function getVel()\n    p1 = getPos()\n    sleep(0.05)\n    vel = getPos() .- p1\n    return vel[3]/0.05\nend\n\nt = time()\nwhile time() - t < 10\n    post(\"Velocity = \"*string.(getVel())*\" m/s\")\nend","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"(Image: getVel.png)","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"Since platform 9¾ remains closed for most of the year we can add a time constraint to automatically close it.","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"t = time()\npost(\"Platform 9¾ open!\")\nwhile time() - t < 30 # Platform closes in 30 seconds\n    v = getVel()\n    pos = getPos()\n    if v >= 4.20 && v <= 4.32\n        if pos[1] < p[1] + 9 && pos[1] > p[1] + 4 && pos[2] == p[2] + 2 && pos[3] > p[3] + 19.3\n            setPos(p)\n        end\n    end\nend\npost(\"Platform 9¾ closed!\")","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"Now, We wish to make an identical copy of this planform.","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"m = copyModel(p .+ (1, 0, 1), p .+ (12, 12, 40))\nbuildModel(rotate(m, dir = :l, dim = :y), p .+ (1, 15, 1))","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"This built a copy of the platform which is perpendicular and above it. Place the new plaform anywhere you desire. Then set p to the coordinates of the arch.","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"","category":"page"},{"location":"example/platform9_75.html","page":"Platform 9¾","title":"Platform 9¾","text":"This page was generated using Literate.jl.","category":"page"},{"location":"example/GameOfLife.html#Cellular-Automaton","page":"Game Of Life","title":"Cellular Automaton","text":"","category":"section"},{"location":"example/GameOfLife.html#Abstract","page":"Game Of Life","title":"Abstract","text":"","category":"section"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"We have an arrangement of atoms/cells. Each cell belongs to one in a finite set of states. With the progression of a unit time cells change their state in a parallel fashion determined by the rules of the system.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"Depending on the initial state and thr rules of the system we get a variety of behaviours. Some systems lead to homogenous states, some exhibit periodic oscillations between states, some are chaotic non-deterministic behaviours, ,.etc . The study of these discrete and abstract computational systems is called cellular automaton. (Image: https://plato.stanford.edu/entries/cellular-automata/) is a great resource to understand and explore these systems.","category":"page"},{"location":"example/GameOfLife.html#Game-of-Life","page":"Game Of Life","title":"Game of Life","text":"","category":"section"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"Game of Life is a popular cellular automaton devised by British mathematician John Conway. It consists of a two dimensional grid of cells with a start state with each cell being either dead or live at any point in time.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"The rules of the system are as follows :-","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"A cell with less than two neighbours dies due to underpopulation.\nA cell with two or three neighbours lives.\nA cell with greater than three neighbours dies by overpopulation.\nA dead cell with three live neighbours becomes live.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"We will implement this game of life in minecraft to generate some interesting patterns.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"using PiCraft","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"First let's write our function which will transform from one state to another.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"function nextState(A::Array{Bool, 2})\n    B = similar(A)\n    dims = size(A)\n    for i = 1:dims[1], j = 1:dims[2]\n        liveNeighbours = 0\n        for p = -1:1, q = -1:1\n            if checkbounds(Bool, A, i + p, j + q) && (p == 0 && q == 0)\n                liveNeighbours += 1\n            end\n        end\n        if A[i, j] == false && liveNeighbours == 3\n            B[i, j] = true\n        elseif liveNeighbours < 2 || liveNeighbours > 3\n            B[i, j] = false\n        end\n    end\n    return B\nend","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"Now to render an arbitrary 2-D board in Minecraft Let live cells be white wool and dead be black wool","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"function displayState(p::Tuple{Int, Int, Int}, A::Array{Bool, 2})\n    dims = size(A)\n    for i = 1:dims[1], j = 1:dims[2]\n        if A[i, j]\n            setBlock(p .+ (i, j, 0), Block(35))\n        else\n            setBlock(p .+ (i, j, 0), Block(35, 15))\n        end\n    end\nend\n\np = getTile() .+ (3, 4, 3)\nA = rand(Bool, 10, 10)\n\nfor i = 1:20\n    displayState(A)\n    A = nextState(A)\n    sleep(0.5)\nend","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"A variety of interesting patterns can be found (Image: here) It is encouraged that you experiment with various patterns.","category":"page"},{"location":"example/GameOfLife.html#D-implementation","page":"Game Of Life","title":"3-D implementation","text":"","category":"section"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"If we want to consider a 3-D implementation of the Game of Life then we must realise that in 3-D a cell will have 26 Neighbours (3^3 - 1).","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"We generally express a 3-D system as a Life wxyz system. The rules of such a system are :","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"The number of live neighbours must be between w and x to sustain life.\nThe number of live neighbours must be between y and z to bring a dead back to life.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"Conway's Game of Life is hence a Life 2333 system. Since a large number of combinations are possible they have been studied extensively for their properties. Most systems quickly collapse or explode. Life 4555 and 5766 are the only valid systems which exhibit life like properties.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"Let's implement Life 4555. For that we will rewrite the nextState and displayState funcitons.","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"function nextState(A::Array{Bool, 3})\n    B = similar(A)\n    dims = size(A)\n    for i = 1:dims[1], j = 1:dims[2], k = 1:dims[3]\n        liveNeighbours = 0\n        for p = -1:1, q = -1:1, r = -1:1\n            if checkbounds(Bool, A, i + p, j + q, k + r) && (p == 0 && q == 0 && r == 0)\n                liveNeighbours += 1\n            end\n        end\n        if A[i, j, k] == false && liveNeighbours == 5\n            B[i, j, k] = true\n        elseif liveNeighbours < 4 || liveNeighbours > 5\n            B[i, j, k] = false\n        end\n    end\n    return B\nend\n\nfunction displayState(p::Tuple{Int, Int, Int}, A::Array{Bool, 3})\n    dims = size(A)\n    for i = 1:dims[1], j = 1:dims[2], k = 1:dims[3]\n        if A[i, j, k]\n            setBlock(p .+ (i, j, k), Block(35))\n        else\n            setBlock(p .+ (i, j, k), Block(35, 15))\n        end\n    end\nend\n\np = getTile() .+ (3, 4, 3)\nA = rand(Bool, 7, 7, 7)\n\nfor i = 1:20\n    displayState(A)\n    A = nextState(A)\n    sleep(0.5)\nend","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"","category":"page"},{"location":"example/GameOfLife.html","page":"Game Of Life","title":"Game Of Life","text":"This page was generated using Literate.jl.","category":"page"},{"location":"coordinateSystem.html#D-coordinate-system","page":"Coordinate System","title":"3-D coordinate system","text":"","category":"section"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"A 3-D coordinate system is used to describe the Minecraft world. Throughout this package we describe a set of coordinates using a Tuple of numbers, for example (3.5, 19, 7) describes a position in the Minecraft World. The 2nd attribute of the tuple describes the y-axis or height. When in game it is convenient to find the player coordinates by opening the debug menu using f3.","category":"page"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"Here, are a few commands associated with positions.","category":"page"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"getPos(): Returns the tuple containg the player's coordinates\nsetPos(x, y, z): Teleport the player to the coordinates (x, y, z)","category":"page"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"For example, setPos(getPos() .+ (0, 10, 0)) moves the player up by 10 units.","category":"page"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"getBlock(pos::Tuple{Real, Real, Real}): Returns the block information\nsetBlock(pos::Tuple{Real, Real, Real}, block::Block): Place block at pos.","category":"page"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"More information on blocks and the Block type will be provided in the next section.","category":"page"},{"location":"coordinateSystem.html#Arrays-and-Tuples","page":"Coordinate System","title":"Arrays and Tuples","text":"","category":"section"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"Array and Tuple are the simplest containers. An array is an ordered collection of elements often used to store lists, tables, vectors and matrices. A tuple is also an ordered collection but of immutable elements. Immutable means that once a tuple is created it cannot be altered. Tuples are generally used for small fixed length collections.","category":"page"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"Both are 1-indexed meaning that the first element is accessed by a[1] where a is the container. Many if not most programming languages use 0 based indexing but trying to access the 0th element of a container will result in an error in Julia.","category":"page"},{"location":"coordinateSystem.html","page":"Coordinate System","title":"Coordinate System","text":"Refer to the Introducing Julia wikibook's Arrays and Tuples page here for more information.","category":"page"},{"location":"example/turnToGold.html#Turn-to-Gold","page":"Turn to Gold","title":"Turn to Gold","text":"","category":"section"},{"location":"example/turnToGold.html#Turn-blocks-to-gold-by-hitting-them","page":"Turn to Gold","title":"Turn blocks to gold by hitting them","text":"","category":"section"},{"location":"example/turnToGold.html","page":"Turn to Gold","title":"Turn to Gold","text":"Demonstration of pollBlockHits() the function pollBlockHits() returns an Array of hit Events A hit event is a tuple, say ((5, 4, 5), 2, 17) (5, 4, 5) are the coordinates to the block which was hit 2 is the face of the block which was hit 17 is the entityId of the Entity which was responsible for the hit","category":"page"},{"location":"example/turnToGold.html","page":"Turn to Gold","title":"Turn to Gold","text":"using Dates\nusing PiCraft\n\nclearEvents() # Clear all previous events\nt = now() # Mark the current time\n\npost(\"60 seconds to turn blocks to gold.\")\n\nwhile (now() - t).value/1000 < 60.0 # Continue the loop if 60 seconds has not elapsed\n    for hit in pollBlockHits()\n        setBlock(hit[1], Block(41)) # hit[1] are the coordinates to the Block which was hit\n    end\nend","category":"page"},{"location":"example/turnToGold.html","page":"Turn to Gold","title":"Turn to Gold","text":"Post a message to screen when done","category":"page"},{"location":"example/turnToGold.html","page":"Turn to Gold","title":"Turn to Gold","text":"post(\"Time Over!\")","category":"page"},{"location":"example/turnToGold.html","page":"Turn to Gold","title":"Turn to Gold","text":"","category":"page"},{"location":"example/turnToGold.html","page":"Turn to Gold","title":"Turn to Gold","text":"This page was generated using Literate.jl.","category":"page"},{"location":"connecting.html#Load-and-Connect","page":"Connecting","title":"Load and Connect","text":"","category":"section"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"Launch Minecraft and Julia.\nIf you don't have the PiCraft package then get it by:","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"using Pkg\nPkg.add(\"https://github.com/JuliaBerry/PiCraft.jl\")","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"Now load the package by:","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"using PiCraft","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"If you get an error saying \"Unable to connect to minecraft world\" then","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"Minecraft may not be running. You need to be inside a World not the launch screen/menu.\nRaspberryJamMod may not be correctly installed","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"If you wish to connect to a instance running on another computer running on your network then:","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"Find the minecraft host's ip address from your router configuration page or by using an appropriate terminal command.\nWindows: ipconfig /all\nLinux: hostname -I\nMacOS: ifconfig | grep \"inet \" | grep -v 127.0.0.1","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"Connect using the connectToWorld(address, port = 4711) function.\nTo check whether everything's working enter post(\"Hello World!\") in the julia terminal.\nYou should see \"Hello World!\" displayed in the minecraft chat.","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"(Image: hello-world)","category":"page"},{"location":"connecting.html","page":"Connecting","title":"Connecting","text":"If you face any issues please open an issue on the PiCraft github or reach us on the julialang slack's #PiCraft channel.","category":"page"},{"location":"whacABlock.html#Create-a-\"Whac-a-Block\"-game-in-Minecraft-from-Julia-using-PiCraft.jl","page":"Whac-a-Block","title":"Create a \"Whac-a-Block\" game in Minecraft from Julia using PiCraft.jl","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Hello everyone! If you are reading this, you’re probably wondering how you can create a game using PiCraft.jl. Well, that's what we're going to be doing today! Our game is called \"Whac-a-Block\" and is inspired by the classic arcade game \"Whac-a-Mole\".","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"The objective of this game is quite simple: it's simply to whack the blocks that light up as glowstone with a sword, and turn them back to stone. You will earn points for each block you turn back to stone! The game is over when all the blocks have been turned into glowstone.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"(Image: img)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Check out this YouTube video for a quick demonstration of the game!","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"This tutorial will be split into 7 parts:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Installing Julia, RaspberryJamMod, and Setting up PiCraft.jl\nCreating the program and making sure that everything's working\nBuilding the game board\nTurning the blocks on\nCreating the \"whacking\" functionality\nAdding Game Over!\nOptional: Adding the option to change difficulty","category":"page"},{"location":"whacABlock.html#Step-1:-Installing-Julia,-RaspberryJamMod,-and-Setting-up-PiCraft.jl","page":"Whac-a-Block","title":"Step 1: Installing Julia, RaspberryJamMod, and Setting up PiCraft.jl","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"PiCraft is a Julia package which utilizes the Minecraft: Pi edition programming API to control the Minecraft World. The package can be used with Minecraft: Java Edition with the help of RaspberryJamMod & RaspberryJuice plugins.","category":"page"},{"location":"whacABlock.html#Minecraft:-Java-edition-users","page":"Whac-a-Block","title":"Minecraft: Java edition users","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Follow the Julia installation instructions here for more details.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"If you need help with installing Minecraft, please check out [https://www.minecraft.net/en-us/download/alternative].","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Get RaspberryJuice or RaspberryJamMod","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Officially the ability to communicate with the Minecraft world is only available for the Minecraft: Pi edition. To get this to work on the Java edition we need to install a Mod.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"\"RaspberryJamMod\" is a Forge Mod, if you wish to use this along with other Forge mods then this is recommended. Installation instructions are available here.\n\"RaspberryJuice\" is a Bukkit server plugin, recommended if you wish to work on a Bukkit Minecraft server. Get it here.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"For more information on how you can do so, please click here.","category":"page"},{"location":"whacABlock.html#Minecraft:-Pi-edition-/-Raspberry-Pi-users","page":"Whac-a-Block","title":"Minecraft: Pi edition / Raspberry Pi users","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"First, grab your Raspberry Pi. Turn it on and open Terminal. Once you're there, type the following:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"sudo apt install julia","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"This should grab you the version 1.0.3, which is enough for this case. (I know it isn't the latest version!)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"The Minecraft: Pi edition is pre-installed on all Rasbian since September 2014. Launch it by navigating to Menu > Games or typing minecraft-pi in the terminal.","category":"page"},{"location":"whacABlock.html#Adding-PiCraft.jl","page":"Whac-a-Block","title":"Adding PiCraft.jl","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Type julia in your Terminal to enter Julia if you haven't already. Then type the following to add the package:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"using Pkg\nPkg.add(\"https://github.com/JuliaBerry/PiCraft.jl\")","category":"page"},{"location":"whacABlock.html#Step-2:-Connecting-PiCraft.jl-to-Minecraft-and-Creating-the-program","page":"Whac-a-Block","title":"Step 2: Connecting PiCraft.jl to Minecraft & Creating the program","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Congrats on completing step 1! Now, you can load the package you just added by entering the following in Julia:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"using PiCraft","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"If you get an error saying \"Unable to connect to minecraft world\" then Minecraft may not be running. You need to be inside a World to the launch screen/menu. Otherwise, check whether RaspberryJamMod was correctly installed.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"If you are still having trouble, or want to connect to a instance running on another computer running on your network, please check out the instructions here for more details.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"To test, first connect using the connectToWorld(address, port = 4711) function. Then, enter post(\"Hello World\") in the julia terminal. You should see \"Hello World\" displayed in the minecraft chat if everything's working properly.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now, you can go the the directory you would like to save the program and open a new Julia file called whack.jl. Make sure it is saved properly. Then, you may enter post(\"Welcome to Minecraft Whac-a-Block\") and see the following result:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"(Image: img)","category":"page"},{"location":"whacABlock.html#Step-3:-Building-the-game-board","page":"Whac-a-Block","title":"Step 3: Building the game board","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"The next step is to create the game board consisting of 3x3 stone blocks, which will randomly turn into glowstone and light up.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"We are going to create the board right in front of the player's current position. First, we need to go the tile they're on (ie. their position), let's do that using getTile(). This returns the tuple containing the coordinates of the block the player's on.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"tile = getTile()","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Then we can use the setBlocks() function to create the game board out of stone.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"setBlocks(tile .+ (-1, 0, 3), tile .+ (1, 2, 3), Block(1))","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"(Image: img)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"From now on, please wrap everything we do with a function called main() and call it when you run it. This is important because of how the scoping works in Julia with different variables. See this Discourse thread for more details.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"You can let the user know that the game is about to start by posting a couple of messages to the chat and delay them using the sleep() function.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"post(\"Get ready...\")\nsleep(2)\npost(\"Go!\")","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"When you run the program again, you should see the game board appear directly in front of the player and the messages you sent out.","category":"page"},{"location":"whacABlock.html#Step-4:-Turning-the-blocks-on","page":"Whac-a-Block","title":"Step 4: Turning the blocks on","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now, we'll be creating the section that turns the stone blocks to glowstone and turn them on, by using  the random() function to pick a random block on the gameboard to turn on.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Let's create a variable called blocksLit, which will hold the number of blocks that are currently on (ie. became glowstone). Then, create another variable called points to store how many points the player has scored, which will be printed out at the game of the game. For now, let's set them both to 0.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"blocksLit = 0\npoints = 0","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Your program will need to loop until the game is over (ie. in this case, until all the blocks are lit).","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"For this, we'll create a while loop which will continue until the blocksLit variable is 9 (when all the blocks are lit). We can put a small delay so that the game won't run too fast that no one will be able to \"whack\" anything!","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"while blocksList < 9\n  sleep(0.2)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Notice how there isn't an end to the loop. That's because it's not done yet. The code below will continue to be part of the while loop.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now, we need to randomly turn a block into glowstone. We need to implement this in such a way that allows it to cope with situations such as whether the block you randomly chose is already on as glowstone. Here, we'll be using a method that creates a random position first, then check to see whether that block is stone. If it isn't stone (meaning that it's glowstone), it'll try to find a new position randomly again, and will do this continously until there's an unlit block.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"First, create a variable called lightCreated then set it to false. Then, create a while loop that continues until lightCreated is set to true. You can also increase the number of blocksLit by 1, to show that another block will be lit:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"  blocksLit = blocksLit + 1\n  lightCreated = false\n  while !(lightCreated)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now, once there's a block that has turned to glowstone, lightCreated will be set to true and the loop will exit. However, this isn't done yet, as we need to fill in the rest of the loop.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"      xpos = tile[1] + randn(-1:1)\n      ypos = tile[2] + randn(0:2)\n      zpos = tile[3] + 3","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"(Image: img)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Use getBlock(x,y,z) and an if statement to check if the block at the random position is stone. If it is, set it to glowstone using setBlock(x,y,z,blockId) and make lightCreated = true; if this is not changed, the code will go back to the start of the loop and find another random position.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"      if getBlock(xpos, ypos, zpos) == Block(1,0)\n        setBlock(xpos, ypos, zpos, Block(89,0)\n        lightCreated = true\n      end\n   end\nend","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now you can run the program again. This time you should see the board appearing and gradually the stone blocks turning into glowstone one by one until all nine are lit.","category":"page"},{"location":"whacABlock.html#Step-5:-Adding-the-\"whacking\"-functionality","page":"Whac-a-Block","title":"Step 5: Adding the \"whacking\" functionality","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"(Image: img)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now, we would like to know whether the player has \"whacked\" a block or not. Luckily, PiCraft.jl has a function that allows you to find out what blocks have been hit. These are called Hit Events and can be found out using the pollBlockHits() function, which returns an array of these events. Each event is described by a tuple ((x, y, z), face, entityId) and the x,y,z values describe the position of the block that got hit.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"What we are trying to achieve here is to find out the position of the block that was hit before checking whether the block hit was glowstone using getBlock. If it was hit, then you can turn it back to stone using setBlock to reteduce the number of blocks lit and increase the number of points.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"So, in your outer while loop starting with while blocksLit < 9, add the following for loop after sleep(0.2):","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"      for block in pollBlockHits()","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"This iterates through all the blocks that had a Hit event and will do the following to them. We can use getBlock and the block data from pollBlockHits() to see if the block hit was glowstone using an if statement. Then, using setBlock to change it back to stone and decreasing blocksLit by 1 and increasing points by 1:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"          if getBlock((block[1][1], block[1][2], block[1][3])) == Block(89, 0)\n              setBlock((block[1][1], block[1][2], block[1][3]), Block(1, 0))\n              blocksLit = blocksLit - 1\n              points = points + 1\n          end\n      end","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now, if you run it again, you should see the board appearing and the blocks lighting up like last time. But in addition, you should also see them turning back to stone if you hit them with a sword by right-clicking!","category":"page"},{"location":"whacABlock.html#Step-6:-Game-Over-and-Finishing-Off","page":"Whac-a-Block","title":"Step 6: Game Over & Finishing Off","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now, you can let everyone know that the game is over (when all 9 blocks are lit) and tell the player how many points they have scored (how many glowstone they turned back into stone). Place the following underneath the outer while loop starting with while blocksLit < 9.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"post(\"Game Over: You have scored \", string(points), \" points!\")","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"(Image: img)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Congratulations!","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Your final code should look like something along the lines with the following:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"using PiCraft\n\npost(\"Welcome to Minecraft Whac-a-Block\") \n\ntile = getTile()\n\nsetBlocks(tile .+ (-1, 0, 3), tile .+ (1, 2, 3), Block(1))\n\nfunction main()\n    post(\"Get ready...\")\n    sleep(2)\n    post(\"Go!\")\n    blocksLit = 0\n    points = 0\n    while blocksLit < 9\n    \n        sleep(0.2)\n        \n        for block in pollBlockHits()\n            if getBlock((block[1][1], block[1][2], block[1][3])) == Block(89, 0)\n                setBlock((block[1][1], block[1][2], block[1][3]), Block(1, 0))\n                blocksLit = blocksLit - 1\n                points = points + 1\n            end\n        end\n        \n        blocksLit = blocksLit + 1\n        lightCreated = false\n        while !(lightCreated)\n            xpos = tile[1] + rand(-1:1)\n            ypos = tile[2] + rand(0:2)\n            zpos = tile[3] + 3\n            if getBlock((xpos, ypos, zpos)) == Block(1,0)\n                setBlock((xpos, ypos, zpos), Block(89, 0))\n                lightCreated = true\n            end\n        end\n    end\n    post(\"Game Over: You have scored \", string(points), \" points!\")\nend\n\nmain()","category":"page"},{"location":"whacABlock.html#Optional:-Adding-the-option-to-change-difficulty","page":"Whac-a-Block","title":"Optional: Adding the option to change difficulty","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"You can alter the difficult of the game by changing how long the program waits before lighting up another stone block into glowstone. Currently it is sleep(0.2) so it's 0.2 seconds. You can decrease that to make the game harder and increase it to make it easier.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"We can create 10 difficulty levels. 10 being the hardest with a 0.1-second interval, and 1 being lowest with a 1-second interval. We can do this by creating a function that asks the user for the difficulty level, analyses it to turn into the interval we want in seconds, which will be the argument for the sleep() function.","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"function difficulty()\n    println(\"Enter difficulty (1-10)\")\n    diff = 1.1 - (parse(Int64, readline()) / 10)\n    println(\"Please return to Minecraft!\")\n    return diff\nend","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Then, all we have to do is call this function in the main() function where everything else is in. Create a variable called level to call this function and have the analysed value put in:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"level = difficulty()","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Then change the sleep(0.2) in the outer while loop starting with while blocksLit < 9 to the following:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"sleep(level)","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Final Code:","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"using PiCraft\n\npost(\"Welcome to Minecraft Whac-a-Block\") \n\ntile = getTile()\n\nsetBlocks(tile .+ (-1, 0, 3), tile .+ (1, 2, 3), Block(1))\n\nfunction difficulty()\n    println(\"Enter difficulty (1-10)\")\n    diff = 1.1 - (parse(Int64, readline()) / 10)\n    println(\"Please return to Minecraft!\")\n    return diff\nend\n    \n\nfunction main()\n    level = difficulty()\n    post(\"Get ready...\")\n    sleep(2)\n    post(\"Go!\")\n    blocksLit = 0\n    points = 0\n    while blocksLit < 9\n    \n        sleep(level)\n        \n        for block in pollBlockHits()\n            if getBlock((block[1][1], block[1][2], block[1][3])) == Block(89, 0)\n                setBlock((block[1][1], block[1][2], block[1][3]), Block(1, 0))\n                blocksLit = blocksLit - 1\n                points = points + 1\n            end\n        end\n        \n        blocksLit = blocksLit + 1\n        lightCreated = false\n        while !(lightCreated)\n            xpos = tile[1] + rand(-1:1)\n            ypos = tile[2] + rand(0:2)\n            zpos = tile[3] + 3\n            if getBlock((xpos, ypos, zpos)) == Block(1,0)\n                setBlock((xpos, ypos, zpos), Block(89, 0))\n                lightCreated = true\n            end\n        end\n    end\n    post(\"Game Over: You have scored \", string(points), \" points!\")\nend\n\nmain()","category":"page"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Now you're all set! Thanks for reading!","category":"page"},{"location":"whacABlock.html#written-by-kfung","page":"Whac-a-Block","title":"written by kfung","text":"","category":"section"},{"location":"whacABlock.html#Reference:","page":"Whac-a-Block","title":"Reference:","text":"","category":"section"},{"location":"whacABlock.html","page":"Whac-a-Block","title":"Whac-a-Block","text":"Some images are from the Whac-A-Block Game worksheet on raspberrypi.org under CC BY-SA.","category":"page"},{"location":"example/turtle.html#Turtle-Programming","page":"Turtle","title":"Turtle Programming","text":"","category":"section"},{"location":"example/turtle.html#Introduction","page":"Turtle","title":"Introduction","text":"","category":"section"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"In this tutorial we will have a look at Turtle Programming. In 1967 a general purpose programming language called LOGO was created. The main highlight of this language was turtle graphics. In turtle graphics we have a robot with a pen which draws on a canvas. We can control this turtle using a few commands. The main commands are :","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"forward : move the turtle forward\nturn : turn the turtle\npenUp/penDown : activate/deactivate the turtle's pen","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"To get a brief understanding of how this works head over here.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"While Turtle programming generally refers to a 2-D turtle we have a 3-D version available. In the 3-D version we have three types of turn available for each of the dimensions of the turtle.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"pitch\nyaw\nroll","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Let's first start with only operating on a 2-D plane and later we will discuss 3-D.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"You need to clear up space for experimentation. Use setBlocks() with PiCraft.AIR to clear up space. If you are on the Java edition then it is suggested that you use New World -> Creative -> World Type: Superflat -> Customize -> Presets -> The Void -> Create New World Then we can setup a canvas for drawing as follows:","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"using PiCraft\np = getPos()\nsetBlocks(p .+ (-50, 0, -50), p .+ (50, 0, 50), Block(35, 15))","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: canvasSetup.png)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"To initialize the turtle:","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"t = turtle(pos = p)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Since we are only concerned with the 2 dimensions of the plane we only need a single turn function which will be yaw","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"turn = yaw\n\nmove(t, 10)\nturn(t, 45) # Note that the angle is in degrees, use `deg2rad(θ)` to convert from radians.\nmove(t, 10)\nt.penBlock = PiCraft.IRON_BLOCK # Change penBlock\nmove(t, 10)\nturn(t, 45)\nmove(t, 10)\nt.penDown = false\nturn(t, 90)\nmove(t, 10)\nt.penDown = true\nmove(t, 10)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: draw1.png) To reset the canvas and the turtle it can be convenient to define a function","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"function clrscr(t, p)\n    setBlocks(p .+ (-50, 0, -50), p .+ (50, 0, 50), Block(35, 15))\n    t.pos = p\nend\nclrscr(t, p)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Draw a square","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"move(t, 10)\nyaw(t, 90)\nmove(t, 10)\nyaw(t, 90)\nmove(t, 10)\nyaw(t, 90)\nmove(t, 10)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: square.png)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"We can also use a 'for loop' for the same","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"clrscr(t, p)\nfor i in 1:4\n    move(t, 10)\n    yaw(t, 90)\nend","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Similarly, we can draw a triangle","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Draw a triangle","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"clrscr(t, p)\nfor i in 1:3\n    move(t, 10)\n    turn(t, 120)\nend","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Challenge: Figure out how to draw a general polygon using a loop","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Solution:","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"function drawPolygon(t::turtle, n::Integer, l::Real)\n    θ = 180 - 360/n\n    for i in 1:n\n        move(t, l)\n        yaw(t, θ)\n    end\nend\n\nclrscr(t, p)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Star","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"for i in 1:5\n    move(t, 50)\n    turn(t, 144)\nend","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: star.png)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"We can also make spirals.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Spiral","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"clrscr(t, p)\nfor i in 1:10\n    move(t, 5*i)\n    turn(t, 90)\nend","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: spiral1.png)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"clrscr(t, p)\nfor i in 1:10\n    move(t, 5 + 5*i)\n    turn(t, 120)\nend","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: spiral2.png)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"","category":"page"},{"location":"example/turtle.html#D-turtle","page":"Turtle","title":"3-D turtle","text":"","category":"section"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"As mentioned earlier instedad of a single turn command we have 3 commands, namely yaw, pitch and roll.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: Roll_Pitch_Yaw.JPG) In essence we have 3 mutually perpendicular axis on the turtle.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Longitudinal(turtle.direction, points forward) : Roll Axis\nLateral : Pitch Axis\nVertical(turtle.normal, points downwards) : Yaw Axis","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"To get the positive rotation direction use the corkscrew rule. (Image: corkscrew rule image)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Curl your right hand's fingers with the thumb pointing outwards like in a thumbs up position. When your thumb points in the axis vector then the curl direction is the positive rotation direction.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"We dont need a canvas to experiment with the 3-D turtle. Reset the world as required.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"move(t, 10)\npitch(t, 45)\nmove(t, 10)\npitch(t, -45)\nyaw(t, 90)\nmove(t, 10)\nroll(t, 90)\npitch(t, 90)\nmove(t, 10)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: draw2.png)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"We can use the same concepts of the 2-D turtle to draw in 3-D.","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Square inclined at 45 degrees","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"t = turtle(pos = getPos())\npitch(t, 45)\nfor i in 1:4\n    move(t, 10)\n    yaw(t, 90)\nend","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"(Image: squareInclined.png)","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"Spring","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"t = turtle(pos = getPos())\nR = 20\nC = 2*pi*R\nfor i in 1:720\n    move(t, C/90)\n    yaw(t, 7)\n    pitch(t, 5)\nend","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"","category":"page"},{"location":"example/turtle.html","page":"Turtle","title":"Turtle","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#PiCraft","page":"Home","title":"PiCraft","text":"","category":"section"},{"location":"index.html#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Control a Minecraft world from Julia","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: PiCraft.png)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PiCraft is a Julia package which utilizes the Minecraft: Pi edition programming API to control the Minecraft World. The package can be used with Minecraft: Java Edition with the help of RaspberryJamMod & RaspberryJuice plugin.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"With this package you will be able to :","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Write scripts to teleport and walk over Water and Lava.\nConstruct multi-storey skyscrapers within seconds.\nDraw fractals and shapes using a 3-D turtle.\nImport and export .schematic models without external software.  ","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This library requires a working installation of Minecraft on your machine. On the Raspberry Pi, this is the only required dependency. On a PC or Mac, the basic Minecraft install needs to be paired with an unofficial plugin that provides the programmatic API access.","category":"page"},{"location":"index.html#Get-Minecraft","page":"Home","title":"Get Minecraft","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The Minecraft: Pi edition is pre-installed on all Rasbian since September 2014. Launch it by navigating to Menu > Games or typing minecraft-pi in the terminal. However, if you are running an older version of Raspbian get it here.\nGet the Minecraft: Java edition(MacOS, Linux and Windows) here.","category":"page"},{"location":"index.html#Get-RaspberryJuice-or-RaspberryJamMod-(for-Minecraft:-Java-edition)","page":"Home","title":"Get RaspberryJuice or RaspberryJamMod (for Minecraft: Java edition)","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Officially the ability to communicate with the Minecraft world is only available for the Minecraft: Pi edition. To get this to work on the Java edition we need to install a Mod.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"\"RaspberryJamMod\" is a Forge Mod, if you wish to use this along with other Forge mods then this is recommended. Installation instructions are available here.\n\"RaspberryJuice\" is a Bukkit server plugin, recommended if you wish to work on a Bukkit Minecraft server. Get it here.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"There is a disagreement in the coordinates reported by Minecraft's debug mode and the getPos() command. Enter /setworldspawn 0 0 0 in the Minecraft console to remove this discrepancy.","category":"page"},{"location":"index.html#Get-Julia","page":"Home","title":"Get Julia","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Download the appropriate Julia version for your system from here.","category":"page"},{"location":"index.html#Install-the-PiCraft-packge","page":"Home","title":"Install the PiCraft packge","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pkg.clone(\"https://github.com/JuliaBerry/PiCraft.jl\")","category":"page"},{"location":"blocksAndModels.html#Blocks-and-Models","page":"Blocks and Models","title":"Blocks and Models","text":"","category":"section"},{"location":"blocksAndModels.html#Blocks","page":"Blocks and Models","title":"Blocks","text":"","category":"section"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"This package provides the ability to modify blocks at specified coordinates.Block is an immutable datatype defined in src/blocks.jl.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"struct Block\n    id::Int\n    data::Int\nend","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"The id defines the type of block (like cobblestone, wool, wood,.etc) and the data attribute defines additional characteristics of the block, on default every block has its data set to 0. For example, Wool's block id is 35, Block(35,0) refers to a block of white wool. Different wool colors can be accessed by changing the data attribute. Red Wool is Block(35, 14), Pink Wool is Block(35,6) and so on. A complete reference can be found in the documentation.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Id Name Subtype Image Data\n35 Wool White (Image: mc-block) 0\n  Orange (Image: mc-block) 1\n  Magenta (Image: mc-block) 2\n  Light Blue (Image: mc-block) 3\n  Yellow (Image: mc-block) 4\n  Lime (Image: mc-block) 5\n  Pink (Image: mc-block) 6","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Place Block: setBlock(Tuple{Int,Int,Int}, block::Block)\nPlace the specified Block at the specified coordinates.\nPlace Blocks: setBlocks(p1::Tuple{Real, Real, Real}, p2::Tuple{Real, Real, Real}, block::Block)\nSet an entire region to the specified block type defined by the corners p1 and p2.\nGet Block information: getBlock(Tuple{Int,Int,Int})\nReturns the Block present at the specified coordinates.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"While getBlock and setBlock functions will accept any Real as arguments these will be rounded to Int as a block cannot be placed on non-integer coordinates.","category":"page"},{"location":"blocksAndModels.html#Models","page":"Blocks and Models","title":"Models","text":"","category":"section"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"The minecraft community has made a large number of fantastic creations over the years. Models allow us to share, collaborate and improve their work. Generally, Models are shared in the .schematic file format which is a type of NBT file(Named Binary Type). What we mean by a Model is a 3-Dimensional array of Blocks(Array{Block, 3}). minecraft-schematics and planetminecraft  are popular websites which host community provided schematic files. Schematic  files are the standard way to import and export models using software like  MCEdit and WorldEdit.","category":"page"},{"location":"blocksAndModels.html#Importing-.schmatic-files","page":"Blocks and Models","title":"Importing .schmatic files","text":"","category":"section"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Let's try to import a sample file. It's named sample.schematic and located in  the example folder.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"This is the model we will be importing:  (Image: sample-model)","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"It's composed of gold and diamond blocks as the colors indicate and the coordinate  axes have been marked.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"The schematic file can be found in the Examples folder or here","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Copy this file to a convenient location like your desktop or documents folder. Now to go to this location we can use the Command Prompt/Shell commands.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Enter the ; character to go into shell mode in a Julia REPL interface. Or you could also use the run() command. For instance to find your current location use cd on Windows and pwd on linux/MacOS.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"shell> ls\nappveyor.yml  example\t  Manifest.toml  README.md  src\ndocs\t      LICENSE.md  Project.toml\t REQUIRE    test\n\nshell> cd ~/Documents\n/home/user/Documents\n\njulia> run(`ls`)\nsample.nbt\nProcess(`ls`, ProcessExited(0))\n","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Now to import our model use the importSchematic(filename::AbstractString) function.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"m = importSchematic(\"./sample.schematic\")\n3×2×4 Array{Block,3}:\n[:, :, 1] =\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(0, 0)\n\n[:, :, 2] =\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(0, 0)\n\n[:, :, 3] =\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(57, 0)\n\n[:, :, 4] =\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(0, 0)\n Block(41, 0)  Block(57, 0)\n","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"It would be helpful to try to relate the information above with the illustration of the model. Notice the indexing is [X, Y, Z]","category":"page"},{"location":"blocksAndModels.html#Model-Functions","page":"Blocks and Models","title":"Model Functions","text":"","category":"section"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Here are the functions you can use with models","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"buildModel(m::Array{Block,3}, pos::Tuple{Real, Real, Real})\ncopyModel(p1::Tuple{Real, Real, Real}, p2::Tuple{Real, Real, Real})\ncutModel(p1::Tuple{Real, Real, Real}, p2::Tuple{Real, Real, Real}, block::Block = Block(0, 0))\nflip(A::Array{Block, 3}, dim::Symbol)\nrotate(A::Array{Block, 3}; dir::Symbol = :l, dim::Symbol = :x)","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"To build the model:","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"julia> pos = getTile()\n\njulia> buildModel(m, pos)\n\njulia> #= This should have build a model, Look in the southeast direction.\n          Now to copy the model, we must know it corner's coordinates.      =#\njulia> size(m)\n(3, 2, 4)\n\njulia> m2 = copyModel(pos .+ (1, 0, 1), pos .+ size(m) .- (0, 1, 0));\n\njulia> m2 == m\ntrue\n\njulia> cutModel(pos .+ (1, 0, 1), pos .+ size(m) .- (0, 1, 0))\n\njulia> # The build model should now me replace by air.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Flipping and rotating are operations essential to constructing symmetric structures.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"flip() can perform a flip in the x-y(:z), y-z(:x) or x-z(:y) plane. To flip our model upside down we have to flip it in the x-z plane.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"julia> m2 = flip(m, :y)\n3×2×4 Array{Block,3}:\n[:, :, 1] =\n Block(0, 0)  Block(41, 0)\n Block(0, 0)  Block(41, 0)\n Block(0, 0)  Block(41, 0)\n\n[:, :, 2] =\n Block(0, 0)  Block(41, 0)\n Block(0, 0)  Block(41, 0)\n Block(0, 0)  Block(41, 0)\n\n[:, :, 3] =\n Block(0, 0)   Block(41, 0)\n Block(0, 0)   Block(41, 0)\n Block(57, 0)  Block(41, 0)\n\n[:, :, 4] =\n Block(0, 0)   Block(41, 0)\n Block(0, 0)   Block(41, 0)\n Block(57, 0)  Block(41, 0)\n\n julia> buildModel(m2, pos)","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"It would be helpful if you try to understand how the Array changes upon a flip. Similarly try to flip the model in other dimensions and build it to see the changes. (flip(m, :x) & flip(m, :z))","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Rotating a model requires two parameters.     1. The plane in which we will rotate. (dim) (:x, :y, :z)     2. Direction of rotating.(dir) (:l, :r)","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Like flipping :x as the dimension indicates a rotation in the y-z plane. And similarly for other dimensions as well. :l indicates a rotation in the counter-clockwise direction and :r indicates a rotation in the clockwise direction when you are looking in the positive direction of the dimension.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Unlike flipping, a rotation might change the dimension of the model.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Here, a script which shows a rotation animation.","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"julia> for i in 1:4\n            cutModel(pos .+ (1, 0, 1), pos .+ size(m) .- (0, 1, 0), Block(0,0))\n            m = rotate(m, :l, :y)\n            buildModel(m, pos)\n            sleep(1)\n        end","category":"page"},{"location":"blocksAndModels.html","page":"Blocks and Models","title":"Blocks and Models","text":"Here we build a Model, wait for a second, remove it, rotate it and repeat for 4 times.","category":"page"}]
}
